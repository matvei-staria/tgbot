# main_bot.py

import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, ConversationHandler, CallbackQueryHandler, filters
from bs4 import BeautifulSoup

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å config
import config
from database import build_or_load_faiss_index, load_model

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
NAME, PHONE, PROBLEM = range(3)
SEARCH_GOODS = 100
SHOW_SEARCH_RESULTS = 200

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = [['–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', '–ü—Ä–æ–±–ª–µ–º–∞']]
reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def clean_html(text):
    """–û—á–∏—Å—Ç–∫–∞ HTML-—Ç–µ–≥–æ–≤ –∏ –∑–∞–º–µ–Ω–∞ <br> –Ω–∞ \n"""
    if not text or text.lower() == 'nan':
        return ""
    text = text.replace('<br>', '\n').replace('<br/>', '\n').replace('<br />', '\n')
    soup = BeautifulSoup(text, 'html.parser')
    return soup.get_text().strip()

def get_caption(good):
    caption = (
        f"<b>{good['title']}</b>\n"
        f"<i>{good['category']}</i>\n\n"
        f"{clean_html(good['text'])}\n\n"
    )
    if good['price']:
        caption += f"<b>üí∞ –¶–µ–Ω–∞:</b> {good['price']} —Ä—É–±"
    return caption

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# === –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ ===

async def enter_search_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("[DEBUG] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ê–°–°–û–†–¢–ò–ú–ï–ù–¢")
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ø–æ–¥–∞—Ä–æ—á–Ω—ã–µ –ø–∞–∑–ª—ã¬ª, ¬´–∫–Ω–∏–≥–∏ –ø—Ä–æ —Å–µ–º—å—é¬ª):')
    return SEARCH_GOODS

async def handle_user_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {query}")
    await update.message.reply_text('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...')

    context.user_data['query'] = query

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        embedding = model.encode([query])
        embedding = normalize(embedding).astype('float32')
    except Exception as e:
        print(f"[ERROR] encode: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.")
        return ConversationHandler.END

    try:
        D, I = index.search(embedding, 5)
    except Exception as e:
        print(f"[ERROR] search: {e}")
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫.")
        return ConversationHandler.END

    results = []
    for i in I[0]:
        if i >= 0 and i < len(goods_metadata):
            results.append(goods_metadata[i])

    if not results:
        print("[INFO] –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    context.user_data['search_results'] = results
    context.user_data['result_index'] = 0

    await send_search_result(update, context)
    return SHOW_SEARCH_RESULTS

async def send_search_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    results = context.user_data['search_results']
    index = context.user_data['result_index']

    good = results[index]
    photos = good['photos']
    current_photo = photos[0] if photos else None

    caption = get_caption(good)

    buttons = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='prev'),
         InlineKeyboardButton("–í –º–µ–Ω—é", callback_data='menu'),
         InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data='next')]
    ]

    if good['url']:
        buttons.insert(0, [InlineKeyboardButton("üåê –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–æ–≤–∞—Ä—É", url=good['url'])])

    reply_markup = InlineKeyboardMarkup(buttons)

    try:
        if current_photo:
            await update.effective_message.reply_photo(
                photo=current_photo,
                caption=caption,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        else:
            await update.effective_message.reply_text(
                text=caption,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞.")
        print(f"[ERROR] send_search_result: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    results = context.user_data.get('search_results', [])
    index = context.user_data.get('result_index', 0)

    if not results:
        return

    if query.data == 'next':
        if index < len(results) - 1:
            context.user_data['result_index'] += 1
            await query.edit_message_media()
            await send_search_result(query, context)
        else:
            await query.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä.")

    elif query.data == 'prev':
        if index > 0:
            context.user_data['result_index'] -= 1
            await query.edit_message_media()
            await send_search_result(query, context)
        else:
            await query.answer("–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä.")

    elif query.data == 'menu':
        await query.edit_message_caption(caption="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return ConversationHandler.END

    return SHOW_SEARCH_RESULTS

# === –ü—Ä–æ–±–ª–µ–º–∞ ===

async def report_problem_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:')
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∏–∫ –≤ Telegram:')
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text('–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É:')
    return PROBLEM

async def get_problem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['problem'] = update.message.text

    name = context.user_data['name']
    phone = context.user_data['phone']
    problem = context.user_data['problem']

    message = (
        f"üî¥ –ù–æ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞:\n\n"
        f"–§–ò–û: {name}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {phone}\n"
        f"–ü—Ä–æ–±–ª–µ–º–∞: {problem}"
    )

    try:
        await context.bot.send_message(chat_id=config.GROUP_CHAT_ID, text=message)
    except Exception as e:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É.")
        print(f"[ERROR] send to group: {e}")

    save_problem(name, phone, problem)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞.")
    return ConversationHandler.END

def save_problem(name, phone, problem):
    import csv
    from datetime import datetime
    file_exists = False
    try:
        with open(config.PROBLEMS_CSV, 'r'):
            file_exists = True
    except FileNotFoundError:
        pass

    with open(config.PROBLEMS_CSV, 'a', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        if not file_exists:
            writer.writerow(['–§–ò–û', '–ö–æ–Ω—Ç–∞–∫—Ç', '–ü—Ä–æ–±–ª–µ–º–∞', '–î–∞—Ç–∞'])
        date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        writer.writerow([name, phone, problem, date])

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

def create_assortment_conversation():
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Text(['–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç']), enter_search_mode)],
        states={
            SEARCH_GOODS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_query)],
            SHOW_SEARCH_RESULTS: [CallbackQueryHandler(button_handler)]
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: u.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"))],
        per_message=True
    )

def create_problem_conversation():
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Text(['–ü—Ä–æ–±–ª–µ–º–∞']), report_problem_start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_problem)],
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: u.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"))]
    )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===

def main():
    application = ApplicationBuilder().token(config.BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(create_assortment_conversation())
    application.add_handler(create_problem_conversation())

    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    model = load_model()
    print('io')
    index, goods_metadata = build_or_load_faiss_index(model)
    main()
